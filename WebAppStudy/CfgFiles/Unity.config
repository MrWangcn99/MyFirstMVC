<?xml version="1.0" encoding="utf-8" ?>
<configuration>
	<configSections>
		<!--Unity IOC-->
		<section name="unity" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Unity.Configuration"/>
	</configSections>
	<unity>
		<sectionExtension type="Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionConfigurationExtension, Unity.Interception.Configuration" /><!--实现AOP需要用到-->
		<containers>
			<container name="WCNContainer">
				<extension type="Interception"/><!--实现AOP需要用到-->
				<!--Unity.Interface.IQuery指类/接口的完成类型名，Unity.Interface指类/接口所在的dll-->
				<!--<register type="Microsoft.EntityFrameworkCore.DbContext, EntityFrameworkCore" mapTo="SqlResource.CustomDbContect, SqlResource"/>-->
				<register type="Bussiness.Interface.ICompanyService, Bussiness.Interface" mapTo="Bussiness.Service.CompanyService, Bussiness.Service"/>
				<register type="Bussiness.Interface.IUserService, Bussiness.Interface" mapTo="Bussiness.Service.UserService, Bussiness.Service"/>
				<!--type:接口所在程序集的全部名称,程序集+接口名 ,接口所在的程序集名称;       mapto:细节类的程序集名称+类名,类所在的程序集名称-->
				<register type=" Bussiness.Interface.IUserService,Bussiness.Interface" mapTo="Bussiness.Service.UserService,Bussiness.Service">
					<!--设置是接口实现Interception还是虚方法VirtualMethodInterceptor实现，常见的就是接口实现和虚方法实现-->
					<interceptor type="InterfaceInterceptor"/>
					<!--设置成接口类型可以让IUserProcessor里面的所以方法都添加下面的功能-->
					<!--谁先写就先调用谁 从外到内访问-->
					<interceptionBehavior type="WebAppStudy.Unitity.AOP.ExceptionLogingBehavior,WebAppStudy"/>
					<!--<interceptionBehavior type="WebAppStudy.Unitity.AOP.CachingBehavior,WebAppStudy"/>-->
					<interceptionBehavior type="WebAppStudy.Unitity.AOP.LogBeforeBehavior,WebAppStudy"/>
					<interceptionBehavior type="WebAppStudy.Unitity.AOP.ParameterCheckBehavior,WebAppStudy"/>
					<interceptionBehavior type="WebAppStudy.Unitity.AOP.LogAfterBehavior,WebAppStudy"/>
				</register>
			</container>
		</containers>
	</unity>
</configuration>

